
#+BEGIN_SRC jupyter-julia
  using TMatrices
  pyplot()
  
  # potfunc = TMatrices.TestCase
  potfunc = TMatrices.TestCase2
  # potfunc = R -> TMatrices.SquareWell(R, height=100.0)
#+END_SRC

#+RESULTS:
:RESULTS:
: â”Œ Info: Precompiling TMatrices [d32406b6-cfbb-43c5-b6a9-648d7495ab4a]
: â”” @ Base loading.jl:1260
: TestCase2 (generic function with 1 method)
:END:

* Lax scans


#+BEGIN_SRC jupyter-julia
  en1 = 1.5 + 0im
  en2 = 2.0 + 0im
  l = 0
  k_list1,T1 = TMatrices.LS.OffShellScattering(en1, l, potfunc, N=70, N_mid=10)
  k_list2,T2 = TMatrices.LS.OffShellScattering(en2, l, potfunc, N=70, N_mid=10)

  plot(k_list1, [real(diag(T1)) imag(diag(T1))], marker=:circle)
  plot!(k_list2, [real(diag(T2)) imag(diag(T2))], line=:dash, label="")
  ylims!(-0.5,0.1)
  xlims!(0,5)
#+END_SRC

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/6d19611d62a2f2eedb840b26696a39ee51e683e7.png]]
:END:

#+BEGIN_SRC jupyter-julia
  k = 1e-4
  T50 = TMatrices.LS.OnShellScattering(k, 0, potfunc, N=50, rmax=40., outer_style=(:legendre,20.))
  T20 = TMatrices.LS.OnShellScattering(k, 0, potfunc, N=20, rmax=40., outer_style=(:legendre,20.))
  T100 = TMatrices.LS.OnShellScattering(k, 0, potfunc, N=100, rmax=40., outer_style=(:legendre,20.))
  T10 = TMatrices.LS.OnShellScattering(k, 0, potfunc, N=10, rmax=40., outer_style=(:legendre,20.))
  T10_laguerre = TMatrices.LS.OnShellScattering(k, 0, potfunc, N=10, rmax=40., outer_style=(:laguerre,1.))

  @show T100 T50 T20 T10 T10_laguerre
#+END_SRC

#+RESULTS:
:RESULTS:
: T100 = -8.108250281972534 - 3.449611768421634im
: T50 = -8.09298962145525 - 3.4337878066734495im
: T20 = 8.450624509740699 - 3.821698241327731im
: T10 = 0.8848312333510832 - 0.03483842348260113im
: T10_laguerre = 2.6091670943967538 - 0.3066379966056616im
: 2.6091670943967538 - 0.3066379966056616im
:END:

#+BEGIN_SRC jupyter-julia
  k_target = 0.0
  c = 0.1
  TMatrices.LS.SearchLax(k_target, potfunc, c, N=50, tol=1e-12, rmax=40., outer_style=(:legendre,20.))#, zero_limit=true)
#+END_SRC

#+RESULTS:
:RESULTS:
: -16.81184963551014 - 9.986151639038446e-14im
:END:

#+BEGIN_SRC jupyter-julia
  k_target = 0.2
  c = 0.1
  TMatrices.LS.SearchLax(k_target, potfunc, c, N=50)
#+END_SRC

#+RESULTS:
:RESULTS:
: -14.126197798221648 - 4.358024466134882e-6im
:END:

#+BEGIN_SRC jupyter-julia
  k_list = linspace(0, 1.0, 11)
  c = 1e-2
  E_list = TMatrices.LS.LaxScan(k_list, potfunc, c, Î±=0.1, tol=1e-5, max_iters=1001, adjust_guess=false, N=50, rmax=40., outer_style=(:legendre, 20.))
#+END_SRC

#+RESULTS:
:RESULTS:
: [32mProgress:  45%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‹                      |  ETA: 0:05:15[39mâ”Œ Error: Got exception for k=0.5
: â”‚   k = 0.5
: â”‚   exc = ErrorException("Max iterations (1001) reached!")
: â”” @ TMatrices.LS /home/pengwyn/work5/julia_packages/TMatrices/src/LS.jl:212
: [32mProgress: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| Time: 0:13:18[39m
#+BEGIN_EXAMPLE
11-element Array{Any,1}:
 -2.7353205447262643 - 1.4409613008473366e-5im
  -2.646627936696299 - 1.4631471361112385e-5im
 -2.4082481599419867 - 1.6246798863467087e-5im
 -2.0860697507073462 - 1.9877031158002698e-5im
 -1.7496724674764956 - 3.0137862537391906e-5im
                   NaN
 0.16812745592059858 - 0.17650353590692103im
  0.2472232146763788 - 0.11221044981095062im
  0.3180926645317253 - 0.09954634012200145im
  0.3954753632205067 - 0.08846877223598595im
  0.4830099183719015 - 0.07507491115271298im
#+END_EXAMPLE
:END:

#+BEGIN_SRC jupyter-julia :file testcase.png
  plot(k_list, [real.(E_list) imag.(E_list)], marker=:circle, xlabel="k (1/aâ‚€)", label=["Îµ" "Î“"])
#+END_SRC
#+RESULTS:
:RESULTS:
[[file:testcase.png]]
:END:

#+BEGIN_SRC jupyter-julia
E_list[1]
#+END_SRC

#+RESULTS:
:RESULTS:
: 0.017609698717712556 - 0.03840681369050346im
:END:


* Zero energy and comparison to linear behaviour from contact potential
  
  #+BEGIN_SRC jupyter-julia
  potfunc = TMatrices.TestCase2
  # potfunc = TMatrices.TestCase
  # pot_kwds = (rmin=1e-4, rmax=60., outer_style=(:legendre,30.))
  pot_kwds = (rmin=1e-4, rmax=60., outer_style=(:laguerre,0.5), N=50)
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  | rmin | = | 0.0001 | rmax | = | 60.0 | outer_style | = | (:laguerre 0.5) | N | = | 50 |
  :END:

#+BEGIN_SRC jupyter-julia
  k_target = 0.
  c = 1e-9
  # E = TMatrices.LS.SearchLax(k_target, potfunc, c, tol=1e-12, zero_limit=true, N=50, outer_style=(:legendre, 20.), max_iters=1001)
  E = WithLogging(:Info) do
      TMatrices.LS.SearchLax(k_target, potfunc, c ; tol=1e-8, zero_limit=false, pot_kwds..., max_iters=101, Î±=1.0)
  end
#+END_SRC

#+RESULTS:
:RESULTS:
: -2.1401603000067358e-7 + 0.0im
:END:

#+BEGIN_SRC jupyter-julia
  V0 = E - k_target^2/2
  V0/c
#+END_SRC

#+RESULTS:
:RESULTS:
: -214.01603000067357 + 0.0im
:END:

#+BEGIN_SRC jupyter-julia
  function ScatLen(k)
      mass = 1.
      Ä§ = 1.
      en = (Ä§*k)^2 / 2mass
      # T = TMatrices.LS.OnShellScattering(en, 0, potfunc ; pot_kwds...)
      Toff = TMatrices.LS.OnShellFromOffShell(en, 0, potfunc ; pot_kwds...)
      # @show T Toff
      @show Toff
      # a = T * ((2pi)^2*mass) / (4pi * Ä§^2)
      a = Toff * ((2pi)^2*mass) / (4pi * Ä§^2)
  end
#+END_SRC

#+RESULTS:
:RESULTS:
: ScatLen (generic function with 1 method)
:END:


#+BEGIN_SRC jupyter-julia
ContactPotential(a, Ä§=1., m=1.) = 2pi*Ä§^2*a/m
k = 0.
a = ScatLen(k)
@show a ContactPotential(a)
#+END_SRC

#+RESULTS:
:RESULTS:
: Toff = -10.883963063180204 + 0.0im
: a = -34.19297840122959 + 0.0im
: ContactPotential(a) = -214.84081949931468 + 0.0im
: -214.84081949931468 + 0.0im
:END:

#+BEGIN_SRC jupyter-julia
ratio = ContactPotential(ScatLen(0.)) / (V0/c)
@show ratio / (2pi^2) ratio
#+END_SRC

#+RESULTS:
:RESULTS:
: Toff = -10.883963063180204 + 0.0im
: ratio / (2 * pi ^ 2) = 0.05085583104754325 - 0.0im
: ratio = 1.0038538678557793 - 0.0im
: 1.0038538678557793 - 0.0im
:END:

** Double check against ODE version
#+BEGIN_SRC jupyter-julia

  using Scattering
  function ODEScatLen(k)
      en = k^2/2
      calc = MC_CALC(potfunc, 0, 1., en, [1e-4,60.])
      Scattering.ScatLenEstimate(calc)
  end
  ODEScatLen.(10.0 .^ (-5:0))
#+END_SRC

#+RESULTS:
:RESULTS:
: â”Œ Info: Precompiling Scattering [794e8658-921d-11e9-2418-5ddc920a8243]
: â”” @ Base loading.jl:1260
: 6-element Array{Complex{Float64},1}:
:   -34.41772420118468 + 2.9945910172999924e-12im
:   -34.41753634947994 + 9.632458676175903e-14im
:  -34.398928668246896 - 5.1174342541315816e-14im
:  -32.683001999268605 + 1.3877787807814457e-15im
:   -9.198533659685447 - 3.469446951953614e-17im
:  -1.4015388886282518 + 4.857225732735059e-17im
:END:

#+BEGIN_SRC jupyter-julia
  using Scattering
  en = 1e-4
  calc = MC_CALC(potfunc, 0, 1., en, [1e-4,40.])
  S, = CalcSMat(calc)
  T = TMatFromS(S[], 0, calc.kvals[])
#+END_SRC

#+RESULTS:
:RESULTS:
: -8.691327447014329 - 4.104666801366394im
:END:


* Look for multiple solutions, with k=0
  #+BEGIN_SRC jupyter-julia
    en_list = LinRange(-1, 1, 1001)
    T_list = map(en_list) do en
        mass = 1.
        Ä§ = 1.
        Toff = TMatrices.LS.OnShellFromOffShell(en + 0im, 0, potfunc, 0. ; pot_kwds...)
        @show Toff
        return Toff
    end
#+END_SRC

#+BEGIN_SRC jupyter-julia
  using JLD2
  @save "Tscan.jld2" en_list T_list pot_kwds
#+END_SRC

#+RESULTS:
:RESULTS:
:END:
