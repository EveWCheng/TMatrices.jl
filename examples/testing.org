#+BEGIN_SRC jupyter-julia
using TMatrices
pyplot()
#+END_SRC

#+RESULTS:
:RESULTS:
: ‚îå Info: Precompiling TMatrices [d32406b6-cfbb-43c5-b6a9-648d7495ab4a]
: ‚îî @ Base loading.jl:1260
: Plots.PyPlotBackend()
:END:

#+BEGIN_SRC jupyter-julia
  # target_k = 1.0
  target_k = 0.1
#+END_SRC

#+RESULTS:
:RESULTS:
: 0.1
:END:

#+BEGIN_SRC jupyter-julia
    mass = 1.
    hbr = 1.
    
    en = target_k^2/2mass
    if false
        en += 0.1im
    end

    rmin,rmax = 1e-8,10.
    
    l = 0

#+END_SRC

#+RESULTS:
:RESULTS:
: 0
:END:

#+BEGIN_SRC jupyter-julia
  Gaussian = TMatrices.Gaussian
  SquareWell = TMatrices.SquareWell
    # potfunc = R -> Gaussian(R, height=1e-1)
    # potfunc = R -> Gaussian(R, height=10.)
    # potfunc = R -> Gaussian(R, height=1e-3)
    # potfunc = R -> Gaussian(R, height=1.)

    # potfunc = R -> SquareWell(R, height=1e-2)
    # potfunc = R -> SquareWell(R, height=1e-3)
    # potfunc = R -> SquareWell(R, height=1)
    # potfunc = R -> SquareWell(R, height=1e2)
    # potfunc = R -> SquareWell(R, height=1e3)

    # potfunc = R -> SquareWell(R, height=-1)
    # potfunc = R -> SquareWell(R, height=-1e-2)

    potfunc = TMatrices.TestCase
#+END_SRC

#+RESULTS:
:RESULTS:
: TestCase (generic function with 1 method)
:END:

#+BEGIN_SRC jupyter-julia
    k_list,u = TMatrices.LS.Quadrature(en)

    M,Vmat = TMatrices.LS.SetupMatrix(k_list, potfunc, l, u ; rmin=rmin, rmax=rmax )
    T = (I - M)\Vmat
#+END_SRC

#+RESULTS:
:RESULTS:
#+BEGIN_EXAMPLE
21√ó21 Array{Complex{Float64},2}:
     1.28597-0.64359im      ‚Ä¶   -0.00229705+0.0011048im
     1.28859-0.64329im          -0.00229596+0.00110428im
     1.28917-0.642154im         -0.00228939+0.00110233im
     1.28289-0.641218im         -0.00226713+0.00110073im
     1.28398-0.639366im         -0.00222647+0.00109755im
     1.28123-0.638008im     ‚Ä¶   -0.00219939+0.00109522im
     1.27564-0.636539im         -0.00216759+0.00109269im
     1.27289-0.633179im         -0.00209538+0.00108693im
     1.26513-0.629524im         -0.00202164+0.00108065im
     1.25807-0.626555im          -0.0019587+0.00107556im
     1.25673-0.624467im     ‚Ä¶   -0.00191956+0.00107197im
     1.19369-0.589383im         -0.00126856+0.00101175im
    0.578205-0.277826im          0.00164669+0.000476921im
   -0.163382+0.0786015im         0.00159592-0.000134929im
   -0.124101+0.0596702im        0.000569754-0.000102431im
  -0.0580636+0.0279165im    ‚Ä¶  -0.000366915-4.7922e-5im
  0.00135774-0.000654823im      -0.00068758+1.12408e-6im
   0.0163011-0.00783942im       0.000158729+1.34573e-5im
 -0.00542516+0.00260908im       0.000310249-4.4788e-6im
  0.00143241-0.000688937im     -0.000480538+1.18264e-6im
 -0.00229705+0.0011048im    ‚Ä¶     0.0013119-1.89652e-6im
#+END_EXAMPLE
:END:

#+BEGIN_SRC jupyter-julia
  ind = findfirst(==(target_k), k_list)
  T_ls = T[ind]
#+END_SRC

#+RESULTS:
:RESULTS:
: 1.2812324701711941 - 0.638007695443447im
:END:

#+BEGIN_SRC jupyter-julia
  # using Scattering
  f_ls = -(2pi)^2*mass / (hbr^2) * T_ls
#+END_SRC

#+RESULTS:
:RESULTS:
: -50.58103050568083 + 25.187534235510096im
:END:

#+BEGIN_SRC jupyter-julia
  en = 0.5
  l = 0
TMatrices.LS.OnShellScattering(en, l, potfunc)
#+END_SRC

#+RESULTS:
:RESULTS:
: -0.15765357595089946 - 0.13734563543487807im
:END:

#+BEGIN_SRC jupyter-julia
  en = -0.5 - 0.05im
  l = 0
  k_list,T = TMatrices.LS.OffShellScattering(en, l, potfunc)
#+END_SRC

#+RESULTS:
:RESULTS:
: '((0.001303049825344807  0.006738434806738754  0.016009571831409428  0.028294971529768342  0.04250331906455318  0.05737222460945168  0.07158057214423652  0.08386597184259544  0.09313710886726612  0.09857249384866006  0.2376690142144973  0.8293300931771739  1.908218445414322  3.501309241528903  5.652371683737808  8.430028290438495  11.943661381574056  16.379133375052113  22.09646135565476  30.0205725559479)  Complex(Float64)(-3.9751524483037186 - 0.10121468382571387im -3.973106848733413 - 0.10120249812151996im ‚Ä¶ -0.001664520278056462 - 7.44322208328887e-5im 0.0030978789882970307 + 0.00013447936442218856im; -3.973106848733414 - 0.10120249812151999im -3.972176019928264 - 0.101190314089718im ‚Ä¶ -0.0016643976969581338 - 7.442402153341771e-5im 0.00309767445434283 + 0.00013446420514479096im; ‚Ä¶ ; -0.0016645202780564618 - 7.443222083288867e-5im -0.001664397696958133 - 7.442402153341767e-5im ‚Ä¶ 0.0023657952336992214 - 1.2516434096063712e-7im -0.0004814431148883923 + 2.0411958414165515e-7im; 0.003097878988297031 + 0.0001344793644221886im 0.0030976744543428306 + 0.0001344642051447909im ‚Ä¶ -0.00048144311488839255 + 2.041195841416551e-7im 0.0013225537897614825 - 3.999449900081296e-7im))
:END:

#+BEGIN_SRC jupyter-julia
  Taa = diag(T)
  ŒîE = @. en - k_list^2/2
  plot(k_list, [real.(Taa) imag.(Taa) real.(ŒîE) imag.(ŒîE)], label=["real" "imag" "ŒîE_r" "ŒîE_i"])
  #hline!([imag(en)], label="E_i")
  ylims!(-5,1)
#+END_SRC

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/ad10d40da8e16bb81111df7a798c3080a16be465.png]]
:END:


** ODE version

#+BEGIN_SRC jupyter-julia
potode = R -> potfunc(ustrip(a0,R)) * E‚Çï
E_ode = (0.5 + 0im)*Eh
k_ode = TMatrices.ODE.kFromE(E_ode)
Œ∫ = k_ode
rspan = (0.001a0, 50.0a0)
#+END_SRC

#+RESULTS:
:RESULTS:
| 0.001 | a‚ÇÄ | 50.0 | a‚ÇÄ |
:END:

#+BEGIN_SRC jupyter-julia
r,u,u‚Ä≤ = TMatrices.ODE.SolveOutwards(rspan, E_ode, k_ode, potode, l)
#+END_SRC

#+RESULTS:
:RESULTS:
: '(Quantity(Float64 ùêã Unitful.FreeUnits((a‚ÇÄ ) ùêã nothing))(0.001 a‚ÇÄ  0.0027925463686267176 a‚ÇÄ  0.005702894256577614 a‚ÇÄ  0.009068658799109109 a‚ÇÄ  0.013245304623779505 a‚ÇÄ  0.017965631309739126 a‚ÇÄ  0.023298041501977035 a‚ÇÄ  0.02909705744641016 a‚ÇÄ  0.035326315151790404 a‚ÇÄ  0.04188870088056138 a‚ÇÄ  ‚Ä¶  49.819955867434494 a‚ÇÄ  49.84162573510411 a‚ÇÄ  49.86330818964465 a‚ÇÄ  49.8850029551556 a‚ÇÄ  49.90670969053499 a‚ÇÄ  49.92842801669715 a‚ÇÄ  49.95015749923554 a‚ÇÄ  49.97189765121875 a‚ÇÄ  49.993647950416396 a‚ÇÄ  50.0 a‚ÇÄ)  Quantity(Complex(Float64) ùêã Unitful.FreeUnits((a‚ÇÄ ) ùêã nothing))(-0.003544907110993114 - 2.4372222056648087e-19im a‚ÇÄ -0.003544836758125201 - 2.4373108061210796e-19im a‚ÇÄ ‚Ä¶ 6.310512143881472 + 9.391288195327855e-17im a‚ÇÄ 6.365131086952418 + 9.391373189875091e-17im a‚ÇÄ; -0.003544907110993114 - 2.4372222056648087e-19im a‚ÇÄ -0.0017522731098971777 - 2.4373108061210796e-19im a‚ÇÄ ‚Ä¶ 7.8221764775905065 + 9.391288195327855e-17im a‚ÇÄ 7.8983273284373965 + 9.391373189875091e-17im a‚ÇÄ)  Complex(Float64)(0.0 + 0.0im 0.00011456533173497049 + 9.775175358393467e-20im ‚Ä¶ 8.618733219230023 - 4.3207803616202e-19im 8.578474926713174 + 1.6446595179991673e-19im; 1.0 + 0.0im 1.0001434844744765 + 9.775175358393467e-20im ‚Ä¶ 12.013314623546991 - 4.3207803616202e-19im 11.963385745839561 + 1.6446595179991673e-19im))
:END:

  #+BEGIN_SRC jupyter-julia
    X = TMatrices.ODE.MatchSolution(u[end], u‚Ä≤[end], r[end], Œ∫, l)
    soln2 = TMatrices.ODE.EliminateIngoing(u, u‚Ä≤, r, Œ∫, l)
    soln2 = TMatrices.ODE.AddBesselPart(r, soln2..., Œ∫, l)
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  | Quantity | (Complex (Float64) ùêã Unitful.FreeUnits ((a‚ÇÄ) ùêã nothing)) | (0.0 + 2.4372222056648087e-19im a‚ÇÄ 0.0013180133119887194 + 0.001089549206368037im a‚ÇÄ 0.0034581134837493727 + 0.0028586849370015933im a‚ÇÄ 0.005933779188769625 + 0.004905219353309887im a‚ÇÄ 0.009007621973755299 + 0.007446242980626544im a‚ÇÄ 0.012485047081187445 + 0.010320892069177945im a‚ÇÄ 0.01641948517242535 + 0.013573335622531896im a‚ÇÄ 0.020707807568334832 + 0.01711832126160968im a‚ÇÄ 0.025328326714261426 + 0.020937920747184327im a‚ÇÄ 0.03021514089020874 + 0.0249776557473092im a‚ÇÄ ‚Ä¶ 0.6634075258183978 + 0.5484126273227327im a‚ÇÄ 0.7206822811026845 + 0.5957593905128763im a‚ÇÄ 0.7776515971255566 + 0.6428536592085751im a‚ÇÄ 0.8342873608837693 + 0.6896721935077098im a‚ÇÄ 0.8905613902837313 + 0.736191696393904im a‚ÇÄ 0.9464455272426733 + 0.7823888906995846im a‚ÇÄ 1.00191161525562 + 0.828240500561472im a‚ÇÄ 1.0569315306659024 + 0.8737232772706602im a‚ÇÄ 1.111477250491824 + 0.9188140553422822im a‚ÇÄ 1.127308956724208 + 0.931901497482516im a‚ÇÄ) | Complex | (Float64) | (0.7352672320961084 + 0.6078161896483139im 0.7352884953941468 + 0.6078337671714628im 0.7354135955374161 + 0.6079371824864488im 0.7356980889112124 + 0.6081723618483101im 0.736259719186005 + 0.608636639268427im 0.7371727620249802 + 0.6093914154846733im 0.7385598844348102 + 0.610538094434739im 0.7404975119102892 + 0.6121398540368148im 0.7430783189657122 + 0.6142733046275226im 0.7463586202036092 + 0.6169849992499388im ‚Ä¶ 2.650454887282744 + 2.1910256843779723im 2.6354577789329348 + 2.1786281711266535im 2.6192133644133637 + 2.165199559452439im 2.601727359717598 + 2.150744574539968im 2.583006206916544 + 2.135268541793154im 2.563057065068154 + 2.1187773793205897im 2.541887835851397 + 2.1012776191261318im 2.5195071729045853 + 2.082776414828552im 2.495924473310943 + 2.0632815346229614im 2.488814008905198 + 2.0574035963807535im) |
  :END:

  #+BEGIN_SRC jupyter-julia
    using Plots
    using UnitfulRecipes
    plot(r,abs.(soln2[1]))
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  [[file:./.ob-jupyter/e5767ff532c50a283a6c0e85fcc2d05fef1e323f.png]]
  :END:

  #+BEGIN_SRC jupyter-julia
    costh = 0.
    u2 = soln2[1]
    T_ode = TMatrices.ODE.Tmat_l(r, u2, potode, k_ode, costh, l)
    T_ode * 4pi
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  : -0.15636873889211292 - 0.12926381988015723im a‚ÇÄ^3 E‚Çï
  :END:

  #+BEGIN_SRC jupyter-julia
f_ode = TMatrices.ODE.fFromT(T_ode)
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  : 0.49124688135456257 + 0.40609426691045625im a‚ÇÄ
  :END:
  
  #+BEGIN_SRC jupyter-julia
TMatrices.ODE.TCSandOptTheorem(f_ode,Œ∫)
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  | DCS | = | 0.4062360520581245 | a‚ÇÄ^2 | TCS | = | 5.104912787076499 | a‚ÇÄ^2 | opt | = | 5.103131062363286 | - | 0.0im | a‚ÇÄ^2 | a | = | 0.6373664974393654 | a‚ÇÄ |
  :END:



